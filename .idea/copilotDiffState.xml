<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/README.md">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/README.md" />
              <option name="originalContent" value="# Multi-Tenant Document Search Demo&#10;&#10;A Spring Boot demo application for multi-tenant document search with per-tenant rate limiting, in-memory caching, and PostgreSQL full-text search. Designed for easy local testing and extensibility.&#10;&#10;## Technology Stack&#10;- Java 11&#10;- Spring Boot (Web, Data JPA, Actuator)&#10;- PostgreSQL&#10;- Caffeine (in-memory cache)&#10;- Lombok&#10;- Maven&#10;&#10;## How to Run&#10;1. **Clone the repository** and navigate to the project directory.&#10;2. **Set up PostgreSQL**:&#10;   - Create a database named `documents_db`.&#10;   - Create a user `postgres` with password `postgres` (or update `src/main/resources/application.properties` accordingly).&#10;3. **Build and run the application**:&#10;   ```sh&#10;   mvn spring-boot:run&#10;   ```&#10;   The app will start on `http://localhost:8080`.&#10;&#10;## REST Endpoints&#10;&#10;### Create Document&#10;```&#10;POST /documents&#10;Headers: X-Tenant-Id: tenant1&#10;Body: { &quot;title&quot;: &quot;Doc Title&quot;, &quot;content&quot;: &quot;Some text&quot; }&#10;```&#10;**Response:**&#10;```&#10;201 Created&#10;{&#10;  &quot;id&quot;: 1,&#10;  &quot;tenantId&quot;: &quot;tenant1&quot;,&#10;  &quot;title&quot;: &quot;Doc Title&quot;,&#10;  &quot;content&quot;: &quot;Some text&quot;,&#10;  &quot;createdAt&quot;: &quot;2025-10-06T12:34:56&quot;&#10;}&#10;```&#10;&#10;### Search Documents&#10;```&#10;GET /search?q=foo&amp;page=0&amp;size=10&#10;Headers: X-Tenant-Id: tenant1&#10;```&#10;**Response:**&#10;```&#10;200 OK&#10;{&#10;  &quot;content&quot;: [ ... ],&#10;  &quot;totalElements&quot;: 1,&#10;  &quot;totalPages&quot;: 1,&#10;  ...&#10;}&#10;```&#10;&#10;### Get Document by ID&#10;```&#10;GET /documents/1&#10;Headers: X-Tenant-Id: tenant1&#10;```&#10;**Response:**&#10;```&#10;200 OK&#10;{ ...document... }&#10;```&#10;&#10;### Delete Document&#10;```&#10;DELETE /documents/1&#10;Headers: X-Tenant-Id: tenant1&#10;```&#10;**Response:**&#10;```&#10;204 No Content&#10;```&#10;&#10;### Health Check&#10;```&#10;GET /actuator/health&#10;```&#10;**Response:**&#10;```&#10;200 OK&#10;{&#10;  &quot;status&quot;: &quot;UP&quot;,&#10;  &quot;components&quot;: { &quot;db&quot;: { &quot;status&quot;: &quot;UP&quot; }, ... }&#10;}&#10;```&#10;&#10;## Multi-Tenancy Approach&#10;- Every request must include the `X-Tenant-Id` header.&#10;- The application enforces tenant scoping at the API and database query level.&#10;- All data access and cache keys are isolated per tenant.&#10;&#10;## Caching&#10;- Search results are cached in-memory (Caffeine) per tenant/query/page/size.&#10;- Cache is invalidated automatically on document creation or deletion for a tenant.&#10;&#10;## Rate Limiting&#10;- Each tenant is limited to 30 requests per minute (sliding window).&#10;- Exceeding the limit returns HTTP 429 with a JSON error.&#10;&#10;## Health Check&#10;- Use `/actuator/health` to verify application and database status.&#10;&#10;## Extensibility &amp; Limitations&#10;- **Demo only:** Uses PostgreSQL ILIKE for text search (not Elasticsearch).&#10;- **In-memory cache and rate limiting:** Not suitable for distributed/multi-instance deployments.&#10;- **No authentication:** Only tenant header is enforced.&#10;- Easily extensible for production use with distributed cache/rate limiting and real authentication.&#10;&#10;## License&#10;MIT License&#10;&#10;## Author&#10;Amit Kakar&#10;&#10;" />
              <option name="updatedContent" value="# Multi-Tenant Document Search Demo&#10;&#10;A Spring Boot demo application for multi-tenant document search with per-tenant rate limiting, in-memory caching, and PostgreSQL full-text search. Designed for easy local testing and extensibility.&#10;&#10;## Technology Stack&#10;- Java 11&#10;- Spring Boot (Web, Data JPA, Actuator)&#10;- PostgreSQL&#10;- Caffeine (in-memory cache)&#10;- Lombok&#10;- Maven&#10;&#10;## How to Run&#10;1. **Clone the repository** and navigate to the project directory.&#10;2. **Set up PostgreSQL**:&#10;   - Create a database named `documents_db`.&#10;   - Create a user `postgres` with password `postgres` (or update `src/main/resources/application.properties` accordingly).&#10;3. **Build and run the application**:&#10;   ```sh&#10;   mvn spring-boot:run&#10;   ```&#10;   The app will start on `http://localhost:8080`.&#10;&#10;## REST Endpoints&#10;&#10;### Create Document&#10;```&#10;POST /documents&#10;Headers: X-Tenant-Id: tenant1&#10;Body: { &quot;title&quot;: &quot;Doc Title&quot;, &quot;content&quot;: &quot;Some text&quot; }&#10;```&#10;**Response:**&#10;```&#10;201 Created&#10;{&#10;  &quot;id&quot;: 1,&#10;  &quot;tenantId&quot;: &quot;tenant1&quot;,&#10;  &quot;title&quot;: &quot;Doc Title&quot;,&#10;  &quot;content&quot;: &quot;Some text&quot;,&#10;  &quot;createdAt&quot;: &quot;2025-10-06T12:34:56&quot;&#10;}&#10;```&#10;&#10;### Search Documents&#10;```&#10;GET /search?q=foo&amp;page=0&amp;size=10&#10;Headers: X-Tenant-Id: tenant1&#10;```&#10;**Response:**&#10;```&#10;200 OK&#10;{&#10;  &quot;content&quot;: [ ... ],&#10;  &quot;totalElements&quot;: 1,&#10;  &quot;totalPages&quot;: 1,&#10;  ...&#10;}&#10;```&#10;&#10;### Get Document by ID&#10;```&#10;GET /documents/1&#10;Headers: X-Tenant-Id: tenant1&#10;```&#10;**Response:**&#10;```&#10;200 OK&#10;{ ...document... }&#10;```&#10;&#10;### Delete Document&#10;```&#10;DELETE /documents/1&#10;Headers: X-Tenant-Id: tenant1&#10;```&#10;**Response:**&#10;```&#10;204 No Content&#10;```&#10;&#10;### Health Check&#10;```&#10;GET /actuator/health&#10;```&#10;**Response:**&#10;```&#10;200 OK&#10;{&#10;  &quot;status&quot;: &quot;UP&quot;,&#10;  &quot;components&quot;: { &quot;db&quot;: { &quot;status&quot;: &quot;UP&quot; }, ... }&#10;}&#10;```&#10;&#10;## Multi-Tenancy Approach&#10;- Every request must include the `X-Tenant-Id` header.&#10;- The application enforces tenant scoping at the API and database query level.&#10;- All data access and cache keys are isolated per tenant.&#10;&#10;## Caching&#10;- Search results are cached in-memory (Caffeine) per tenant/query/page/size.&#10;- Cache is invalidated automatically on document creation or deletion for a tenant.&#10;&#10;## Rate Limiting&#10;- Each tenant is limited to 30 requests per minute (sliding window).&#10;- Exceeding the limit returns HTTP 429 with a JSON error.&#10;&#10;## Health Check&#10;- Use `/actuator/health` to verify application and database status.&#10;&#10;## Extensibility &amp; Limitations&#10;- **Demo only:** Uses PostgreSQL ILIKE for text search (not Elasticsearch).&#10;- **In-memory cache and rate limiting:** Not suitable for distributed/multi-instance deployments.&#10;- **No authentication:** Only tenant header is enforced.&#10;- Easily extensible for production use with distributed cache/rate limiting and real authentication.&#10;&#10;## License&#10;MIT License&#10;&#10;## Author&#10;Amit Kakar&#10;&#10;# Environment variables for local development&#10;# These can be set in your IDE, OS, or a .env file if supported&#10;DB_HOST=localhost&#10;DB_PORT=5432&#10;DB_NAME=documents_db&#10;DB_USER=postgres&#10;DB_PASSWORD=postgres" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>